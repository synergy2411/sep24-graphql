type Subscription {
  post: PostSubscriptionPayload!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(userId: ID!): User!
  updateUser(userId: ID!, data: UpdateUserInput): User!
  createPost(authorId: ID!, data: CreatePostInput): Post!
  deletePost(postId: ID!): Post!
  createComment(creatorId: ID!, postId: ID!, text: String!): Comment!
  deleteComment(commentId: ID!): Comment!
}

type Query {
  users(term: String, maxAge: Int): [User!]!
  posts(term: String): [Post!]!
  comments: [Comment!]!
}
type User {
  id: ID!
  name: String!
  age: Int!
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  post: Post
  creator: User!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

input CreateUserInput {
  name: String!
  age: Int!
}
input CreatePostInput {
  title: String!
  body: String!
}
input UpdateUserInput {
  name: String
  age: Int
}

enum MutationType {
  CREATED
  DELETED
}
